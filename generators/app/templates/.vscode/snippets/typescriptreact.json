{
	"Function Component": {
		"prefix": "fcomp",
		"body": [
			"// prettier-ignore",
			"import { makeStyles } from '@material-ui/core';",
			"import * as React from 'react';",
			"",
			"interface Props {",
			"",
			"}",
			"",
			"export function $TM_FILENAME_BASE(props: Props) {",
			"",
			"const {  } = props;",
			"const classes = useStyles();",
			"",
			"return (",
			"<div className={classes.root}>",
			"<div />",
			"</div>",
			");",
			"}",
			"",
			"const useStyles = makeStyles({",
			"",
			"root: {",
			"",
			"},",
			"});"
		],
		"description": "component + makeStyle"
	},
	"Function Component makeStyle + Props": {
		"prefix": "fcomp",
		"body": [
			"// prettier-ignore",
			"import { makeStyles } from '@material-ui/core';",
			"import * as React from 'react';",
			"",
			"interface Props {",
			"",
			"}",
			"",
			"export function $TM_FILENAME_BASE(props: Props) {",
			"",
			"const {  } = props;",
			"const classes = useStyles(props);",
			"",
			"return (",
			"<div className={classes.root}>",
			"<div />",
			"</div>",
			");",
			"}",
			"",
			"const useStyles = makeStyles({",
			"",
			"root: (props: Props) => ({",
			"",
			"}),",
			"});"
		],
		"description": "component + makeStyle + Props"
	},
	"Function Component makeStyle + Props + Theme": {
		"prefix": "fcomp",
		"body": [
			"// prettier-ignore",
			"import { makeStyles, Theme } from '@material-ui/core';",
			"import * as React from 'react';",
			"",
			"interface Props {",
			"",
			"}",
			"",
			"export function $TM_FILENAME_BASE(props: Props) {",
			"",
			"const {  } = props;",
			"const classes = useStyles(props);",
			"",
			"return (",
			"<div className={classes.root}>",
			"<div />",
			"</div>",
			");",
			"}",
			"",
			"const useStyles = makeStyles((theme: Theme) => ({",
			"",
			"root: (props: Props) => ({",
			"",
			"}),",
			"}));"
		],
		"description": "component + makeStyle + Props + Theme"
	},
	"Function Component makeStyle + Theme": {
		"prefix": "fcomp",
		"body": [
			"// prettier-ignore",
			"import { makeStyles, Theme } from '@material-ui/core';",
			"import * as React from 'react';",
			"",
			"interface Props {",
			"",
			"}",
			"",
			"export function $TM_FILENAME_BASE(props: Props) {",
			"",
			"const {  } = props;",
			"const classes = useStyles();",
			"",
			"return (",
			"<div className={classes.root}>",
			"<div />",
			"</div>",
			");",
			"}",
			"",
			"const useStyles = makeStyles((theme: Theme) => ({",
			"",
			"root: {",
			"",
			"},",
			"}));"
		],
		"description": "component + makeStyle + Theme"
	},
	"useState": {
		"prefix": "useState",
		"body": ["const [${1:value}, set${1/(.*)/${1:/capitalize}/}] = React.useState(${2:value});$0"]
	},

	"lodash": {
		"prefix": "lodash",
		"body": ["import * as _ from 'lodash';"]
	},

	"useAction": {
		"prefix": "useAction",
		"body": [
			"// import * as ${1/(.*)/${1:/capitalize}/}Actions from '../actions/${1:actionname}';",
			"const ${1:actionname}Actions: typeof ${1/(.*)/${1:/capitalize}/}Actions = useActions(${1/(.*)/${1:/capitalize}/}Actions);"
		]
	},

	"useEffect": {
		"prefix": "useEffect",
		"body": ["React.useEffect(() => {", "$0", "}, []);"]
	},

	"useSelector": {
		"prefix": "useSelector",
		"body": "const ${1:varialbe}: ${2:type} = useSelector((state: RootState) => state.${1:varialbe});"
	},

	"useHistory": {
		"prefix": "useHistory",
		"body": "const history = useHistory();"
	},

	"useMediaQuery - Breakpoint": {
		"prefix": "useMedia",
		"body": "const isMobile = useMediaQuery((theme: Theme) => theme.breakpoints.down('sm'));"
	},

	"useMediaQuery - ScreenWidth": {
		"prefix": "useMedia",
		"body": "const showIcon = useMediaQuery('(max-width:400px)');"
	},

	"useResponsive - isMobile": {
		"prefix": "isMobile",
		"body": "const { isMobile } = useResponsive();"
	},

	"handleTextField": {
		"prefix": "handleTextField",
		"body": [
			"const handle${1:value} = (e: React.ChangeEvent<HTMLInputElement>) => {",
			"const value = e.target.value;",
			"",
			"};"
		]
	},

	"handleSelect": {
		"prefix": "handleSelect",
		"body": [
			"const handle${1:value} =  (e: React.ChangeEvent<{ value: any }>) => {",
			"const value = e.target.value as string;",
			"",
			"};"
		]
	},

	"story": {
		"prefix": "story",
		"body": [
			"import { Meta } from '@storybook/react';",
			"import * as React from 'react';",
			"import { withTheme } from './index.stories';",
			"import { ${TM_FILENAME_BASE/(.stories)//}Props} from '../src/components/${TM_FILENAME_BASE/(.stories)//}'",
			"import { ${TM_FILENAME_BASE/(.stories)//} } from '../src';",
			"",
			"export default {",
			"title: '${TM_FILENAME_BASE/(.stories)//}',",
			"component: ${TM_FILENAME_BASE/(.stories)//},",
			"// argTypes: { onClick: { action: 'clicked' } },",
			"} as Meta;",
			"",
			"const Template = (args: ${TM_FILENAME_BASE/(.stories)//}Props) =>",
			"withTheme(",
			"<${TM_FILENAME_BASE/(.stories)//} {...args} />",
			");",
			"",
			"export const Default = Template.bind({});",
			"",
			"Default.args = {",
			"",
			"// add your props here",
			"",
			"} as ${TM_FILENAME_BASE/(.stories)//}Props;",
			""
		],
		"description": "storybook"
	}
}
